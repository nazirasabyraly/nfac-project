# backend/app/services/spotify.py

import httpx
import base64
from typing import List
from app.config import SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET, SPOTIFY_REDIRECT_URI

SPOTIFY_API_BASE = "https://api.spotify.com/v1"



async def get_user_profile(access_token: str):
    headers = {
        "Authorization": f"Bearer {access_token}"
    }

    async with httpx.AsyncClient() as client:
        response = await client.get("https://api.spotify.com/v1/me", headers=headers)
        response.raise_for_status()
        return response.json()

def get_spotify_auth_url():
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π scope –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    scope = "user-top-read user-read-recently-played user-read-private user-read-email playlist-read-private user-library-read"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º frontend ngrok URL –¥–ª—è callback
    frontend_callback_url = "https://9a9d-95-56-238-194.ngrok-free.app/callback"
    return (
        f"https://accounts.spotify.com/authorize"
        f"?client_id={SPOTIFY_CLIENT_ID}"
        f"&response_type=code"
        f"&redirect_uri={frontend_callback_url}"
        f"&scope={scope}"
    )

async def exchange_code_for_token(code: str):
    print(f"üîÑ Starting token exchange for code: {code[:10]}...")
    
    url = "https://accounts.spotify.com/api/token"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º frontend ngrok URL –¥–ª—è callback
    frontend_callback_url = "https://9a9d-95-56-238-194.ngrok-free.app/callback"
    print(f"üåê Using redirect_uri: {frontend_callback_url}")

    headers = {
        "Authorization": "Basic " + base64.b64encode(
            f"{SPOTIFY_CLIENT_ID}:{SPOTIFY_CLIENT_SECRET}".encode()
        ).decode(),
        "Content-Type": "application/x-www-form-urlencoded"
    }

    data = {
        "grant_type": "authorization_code",
        "code": code,
        "redirect_uri": frontend_callback_url
    }
    
    print(f"üì§ Request data: {data}")
    print(f"üîë Client ID: {SPOTIFY_CLIENT_ID[:10]}...")

    async with httpx.AsyncClient() as client:
        try:
            print(f"üåê Sending request to Spotify...")
            response = await client.post(url, data=data, headers=headers)
            print(f"üì° Response status: {response.status_code}")
            print(f"üì° Response headers: {dict(response.headers)}")
            
            if response.status_code != 200:
                error_text = response.text
                print(f"‚ùå Spotify error response: {error_text}")
                raise Exception(f"Spotify API error: {response.status_code} - {error_text}")
            
            response_data = response.json()
            print(f"‚úÖ Token exchange successful: {list(response_data.keys())}")
            return response_data
            
        except Exception as e:
            print(f"‚ùå Exception in exchange_code_for_token: {str(e)}")
            raise e


# üîΩ –ù–æ–≤—ã–π –∫–æ–¥ ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤ –∏ —Ñ–∏—á
async def get_user_top_tracks(access_token: str, limit: int = 10):
    headers = {
        "Authorization": f"Bearer {access_token}"
    }

    async with httpx.AsyncClient() as client:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ç—Ä–µ–∫–∏
        response = await client.get(
            f"{SPOTIFY_API_BASE}/me/top/tracks",
            headers=headers,
            params={"limit": limit}
        )
        response.raise_for_status()
        top_tracks = response.json()["items"]

        track_ids = [track["id"] for track in top_tracks]

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏—á–∏
        features_response = await client.get(
            f"{SPOTIFY_API_BASE}/audio-features",
            headers=headers,
            params={"ids": ",".join(track_ids)}
        )
        features_response.raise_for_status()
        features = features_response.json()["audio_features"]

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        result = []
        for track, feature in zip(top_tracks, features):
            result.append({
                "name": track["name"],
                "artist": track["artists"][0]["name"],
                "id": track["id"],
                "valence": feature.get("valence"),
                "energy": feature.get("energy"),
                "danceability": feature.get("danceability"),
                "preview_url": track["preview_url"],
                "image": track["album"]["images"][0]["url"]
            })

        return result

# üîΩ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è VibeMatch
async def get_user_recently_played(access_token: str, limit: int = 20):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    headers = {
        "Authorization": f"Bearer {access_token}"
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{SPOTIFY_API_BASE}/me/player/recently-played",
            headers=headers,
            params={"limit": limit}
        )
        response.raise_for_status()
        return response.json()["items"]

async def get_user_playlists(access_token: str, limit: int = 20):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    headers = {
        "Authorization": f"Bearer {access_token}"
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{SPOTIFY_API_BASE}/me/playlists",
            headers=headers,
            params={"limit": limit}
        )
        response.raise_for_status()
        return response.json()["items"]

async def get_user_liked_tracks(access_token: str, limit: int = 20):
    """–ü–æ–ª—É—á–∞–µ—Ç –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    headers = {
        "Authorization": f"Bearer {access_token}"
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{SPOTIFY_API_BASE}/me/tracks",
            headers=headers,
            params={"limit": limit}
        )
        response.raise_for_status()
        return response.json()["items"]

async def get_tracks_with_features(track_ids: list, access_token: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ —Å –∏—Ö –∞—É–¥–∏–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
    headers = {
        "Authorization": f"Bearer {access_token}"
    }

    async with httpx.AsyncClient() as client:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö
        tracks_response = await client.get(
            f"{SPOTIFY_API_BASE}/tracks",
            headers=headers,
            params={"ids": ",".join(track_ids)}
        )
        tracks_response.raise_for_status()
        tracks = tracks_response.json()["tracks"]

        # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        features_response = await client.get(
            f"{SPOTIFY_API_BASE}/audio-features",
            headers=headers,
            params={"ids": ",".join(track_ids)}
        )
        features_response.raise_for_status()
        features = features_response.json()["audio_features"]

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        result = []
        for track, feature in zip(tracks, features):
            if track and feature:
                result.append({
                    "id": track["id"],
                    "name": track["name"],
                    "artist": track["artists"][0]["name"],
                    "album": track["album"]["name"],
                    "image": track["album"]["images"][0]["url"] if track["album"]["images"] else None,
                    "preview_url": track["preview_url"],
                    "popularity": track["popularity"],
                    # –ê—É–¥–∏–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    "valence": feature.get("valence", 0),  # –ü–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å (0-1)
                    "energy": feature.get("energy", 0),    # –≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å (0-1)
                    "danceability": feature.get("danceability", 0),  # –¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ—Å—Ç—å (0-1)
                    "tempo": feature.get("tempo", 0),      # –¢–µ–º–ø (BPM)
                    "acousticness": feature.get("acousticness", 0),  # –ê–∫—É—Å—Ç–∏—á–Ω–æ—Å—Ç—å (0-1)
                    "instrumentalness": feature.get("instrumentalness", 0),  # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ—Å—Ç—å (0-1)
                    "liveness": feature.get("liveness", 0),  # –ñ–∏–≤–æ—Å—Ç—å (0-1)
                    "speechiness": feature.get("speechiness", 0),  # –†–µ—á–µ–≤–æ—Å—Ç—å (0-1)
                    "mode": feature.get("mode", 0),        # –ú–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä (0/1)
                    "key": feature.get("key", 0),          # –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (0-11)
                })

        return result

async def analyze_user_music_taste(access_token: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        print(f"üîç Starting music taste analysis...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        top_tracks = []
        recent_tracks = []
        liked_tracks = []
        
        try:
            top_tracks = await get_user_top_tracks(access_token, 20)
            print(f"‚úÖ Got {len(top_tracks)} top tracks")
        except Exception as e:
            print(f"‚ö†Ô∏è Could not get top tracks: {str(e)}")
        
        try:
            recent_tracks = await get_user_recently_played(access_token, 20)
            print(f"‚úÖ Got {len(recent_tracks)} recent tracks")
        except Exception as e:
            print(f"‚ö†Ô∏è Could not get recent tracks: {str(e)}")
        
        try:
            liked_tracks = await get_user_liked_tracks(access_token, 20)
            print(f"‚úÖ Got {len(liked_tracks)} liked tracks")
        except Exception as e:
            print(f"‚ö†Ô∏è Could not get liked tracks: {str(e)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
        all_tracks = []
        all_tracks.extend(top_tracks)
        all_tracks.extend(recent_tracks)
        all_tracks.extend(liked_tracks)
        
        print(f"üìä Total tracks collected: {len(all_tracks)}")
        
        if len(all_tracks) == 0:
            return {
                "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–ª—É—à–∞—Ç—å –±–æ–ª—å—à–µ –º—É–∑—ã–∫–∏ –≤ Spotify –∏–ª–∏ –ª–∞–π–∫–Ω—É—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤."
            }
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_tracks = {track["id"]: track for track in all_tracks}.values()
        unique_tracks = list(unique_tracks)
        
        print(f"üìä Unique tracks after deduplication: {len(unique_tracks)}")
        
        if len(unique_tracks) < 3:
            return {
                "error": f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({len(unique_tracks)}). –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ç—Ä–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–ª—É—à–∞—Ç—å –±–æ–ª—å—à–µ –º—É–∑—ã–∫–∏ –≤ Spotify."
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        total_valence = sum(track.get("valence", 0) for track in unique_tracks)
        total_energy = sum(track.get("energy", 0) for track in unique_tracks)
        total_danceability = sum(track.get("danceability", 0) for track in unique_tracks)
        total_tempo = sum(track.get("tempo", 0) for track in unique_tracks)
        
        track_count = len(unique_tracks)
        
        analysis = {
            "mood": {
                "valence": total_valence / track_count,  # –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å
                "energy": total_energy / track_count,    # –°—Ä–µ–¥–Ω—è—è —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å
                "danceability": total_danceability / track_count,  # –°—Ä–µ–¥–Ω—è—è —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ—Å—Ç—å
                "tempo": total_tempo / track_count,      # –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø
            },
            "preferences": {
                "favorite_artists": list(set(track["artist"] for track in unique_tracks))[:10],
                "favorite_genres": [],  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∂–∞–Ω—Ä–æ–≤
                "total_tracks_analyzed": track_count
            }
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        if analysis["mood"]["valence"] > 0.6:
            analysis["overall_mood"] = "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"
        elif analysis["mood"]["valence"] > 0.4:
            analysis["overall_mood"] = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"
        else:
            analysis["overall_mood"] = "–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ"
        
        print(f"‚úÖ Analysis completed successfully")
        return analysis
            
    except Exception as e:
        print(f"‚ùå Error analyzing music taste: {str(e)}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∫—É—Å–∞: {str(e)}"}
