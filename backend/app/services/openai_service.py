import base64
import io
import mimetypes
from typing import Optional, Dict, Any
import openai
from fastapi import UploadFile
from ..config import (
    AZURE_OPENAI_API_KEY, 
    AZURE_OPENAI_ENDPOINT, 
    AZURE_OPENAI_API_VERSION, 
    AZURE_OPENAI_DEPLOYMENT_NAME,
    OPENAI_API_KEY
)

class OpenAIService:
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Azure OpenAI
        if AZURE_OPENAI_API_KEY and AZURE_OPENAI_ENDPOINT and AZURE_OPENAI_DEPLOYMENT_NAME:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Azure OpenAI
            self.client = openai.AzureOpenAI(
                api_key=AZURE_OPENAI_API_KEY,
                api_version=AZURE_OPENAI_API_VERSION,
                azure_endpoint=AZURE_OPENAI_ENDPOINT
            )
            self.deployment_name = AZURE_OPENAI_DEPLOYMENT_NAME
            self.use_azure = True
            print("üîµ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Azure OpenAI")
        elif OPENAI_API_KEY:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π OpenAI
            self.client = openai.OpenAI(api_key=OPENAI_API_KEY)
            self.deployment_name = None
            self.use_azure = False
            print("üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI API")
        else:
            raise ValueError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ Azure OpenAI, –Ω–∏ OpenAI API")
    
    async def analyze_media_mood(self, file: UploadFile) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/–≤–∞–π–±
        """
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            file_content = await file.read()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_type = self._get_file_type(file.filename)
            
            if file_type == "image":
                return await self._analyze_image(file_content, file.filename)
            elif file_type == "video":
                return await self._analyze_video(file_content, file.filename)
            else:
                raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
                
        except Exception as e:
            return {
                "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}",
                "mood": "neutral",
                "description": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"
            }
    
    async def _analyze_image(self, file_content: bytes, filename: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é GPT-4 Vision
        """
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        base64_image = base64.b64encode(file_content).decode('utf-8')
        
        prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
        1. –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–¥–æ—Å—Ç–Ω–∞—è, –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–∞—è, —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è, —Å–ø–æ–∫–æ–π–Ω–∞—è)
        2. –¶–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –∏ –µ—ë –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        3. –≠–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—ë—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        4. –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∂–∞–Ω—Ä –∏–ª–∏ —Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–æ—à—ë–ª –±—ã –∫ —ç—Ç–æ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
        5. –ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (caption) –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, –æ—Ç—Ä–∞–∂–∞—é—â–µ–µ –≤–∞–π–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ —Ö—ç—à—Ç–µ–≥–æ–≤)
        
        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {
            "mood": "–æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
            "emotions": ["—Å–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π"],
            "colors": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤",
            "music_genre": "–ø–æ–¥—Ö–æ–¥—è—â–∏–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∂–∞–Ω—Ä",
            "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–π–±–∞",
            "caption": "–∫—Ä–∞—Ç–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞"
        }
        """
        
        # –î–ª—è Azure OpenAI –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Vision
        if self.use_azure:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gpt-4o –¥–ª—è Vision (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Azure)
            try:
                response = self.client.chat.completions.create(
                    model="gpt-4o",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-4o –¥–ª—è Vision
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {"type": "text", "text": prompt},
                                {
                                    "type": "image_url",
                                    "image_url": {
                                        "url": f"data:image/jpeg;base64,{base64_image}"
                                    }
                                }
                            ]
                        }
                    ],
                    max_tokens=500
                )
            except Exception as e:
                # –ï—Å–ª–∏ gpt-4o –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π OpenAI
                print(f"Azure OpenAI Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                if OPENAI_API_KEY:
                    client = openai.OpenAI(api_key=OPENAI_API_KEY)
                    response = client.chat.completions.create(
                        model="gpt-4o",
                        messages=[
                            {
                                "role": "user",
                                "content": [
                                    {"type": "text", "text": prompt},
                                    {
                                        "type": "image_url",
                                        "image_url": {
                                            "url": f"data:image/jpeg;base64,{base64_image}"
                                        }
                                    }
                                ]
                            }
                        ],
                        max_tokens=500
                    )
                else:
                    raise e
        else:
            # –û–±—ã—á–Ω—ã–π OpenAI
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{base64_image}"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=500
            )
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        content = response.choices[0].message.content
        try:
            import json
            result = json.loads(content)
        except Exception:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
            import re, json
            match = re.search(r'\{[\s\S]*\}', content)
            if match:
                try:
                    result = json.loads(match.group(0))
                except Exception:
                    result = {}
            else:
                result = {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        mood = result.get("mood", "neutral")
        emotions = result.get("emotions", [])
        colors = result.get("colors", "")
        music_genre = result.get("music_genre", result.get("music_style", "pop"))
        description = result.get("description", "")
        caption = result.get("caption")
        if not caption and description:
            # –ï—Å–ª–∏ –Ω–µ—Ç caption, –¥–µ–ª–∞–µ–º –µ–≥–æ –∏–∑ description
            caption = description[:100] + ("..." if len(description) > 100 else "")
        
        return {
            "success": True,
            "mood": mood,
            "emotions": emotions,
            "colors": colors,
            "music_genre": music_genre,
            "description": description,
            "caption": caption,
            "analysis": content
        }
    
    async def _analyze_video(self, file_content: bytes, filename: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä)
        """
        # –î–ª—è –≤–∏–¥–µ–æ –ø–æ–∫–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –∏ –¥–≤–∏–∂–µ–Ω–∏—è
        
        prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –≤–∏–¥–µ–æ–∫–∞–¥—Ä –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
        1. –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
        2. –î–∏–Ω–∞–º–∏–∫—É –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∫–∞–¥—Ä–µ
        3. –≠–º–æ—Ü–∏–∏ –∏ –≤–∞–π–±
        4. –ü–æ–¥—Ö–æ–¥—è—â–∏–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
        
        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {
            "mood": "–æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
            "dynamics": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏",
            "emotions": ["—Å–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π"],
            "music_style": "–ø–æ–¥—Ö–æ–¥—è—â–∏–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å",
            "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–π–±–∞"
        }
        """
        
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        return {
            "success": True,
            "mood": "dynamic",
            "dynamics": "–í–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∏–∂–µ–Ω–∏–µ",
            "emotions": ["—ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å", "–¥–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç—å"],
            "music_style": "electronic",
            "description": "–î–∏–Ω–∞–º–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ —Å —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º",
            "note": "–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"
        }
    
    def _get_file_type(self, filename: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        """
        if not filename:
            return "unknown"
        
        ext = filename.lower().split('.')[-1]
        
        if ext in ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp']:
            return "image"
        elif ext in ['mp4', 'mov', 'avi', 'mkv', 'webm']:
            return "video"
        else:
            return "unknown"
    
    async def get_music_recommendations(self, mood_analysis: Dict[str, Any], user_preferences: Dict[str, Any], n_tracks: int = 5) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É—á—ë—Ç–æ–º –µ–≥–æ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤)
        """
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è "{mood_analysis.get('mood', 'neutral')}" –∏ —ç–º–æ—Ü–∏–π {mood_analysis.get('emotions', [])} –ø—Ä–µ–¥–ª–æ–∂–∏ {n_tracks} –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.
        
        –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_preferences.get('top_artists', [])}
        
        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "recommended_tracks": [
                {{"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "artist": "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "reason": "–ø–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç"}}
            ],
            "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
            "alternative_genres": ["–∂–∞–Ω—Ä1", "–∂–∞–Ω—Ä2"]
        }}
        """
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∫–ª–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.use_azure:
            # –î–ª—è Azure OpenAI –∏—Å–ø–æ–ª—å–∑—É–µ–º deployment_name (gpt-4o)
            model = self.deployment_name
            client = self.client
            print(f"[RECOMMEND] –ò—Å–ø–æ–ª—å–∑—É–µ–º Azure OpenAI —Å –º–æ–¥–µ–ª—å—é: {model}")
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ OpenAI –∏—Å–ø–æ–ª—å–∑—É–µ–º gpt-4
            model = "gpt-4"
            client = self.client
            print(f"[RECOMMEND] –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API —Å –º–æ–¥–µ–ª—å—é: {model}")
        
        try:
            print(f"[RECOMMEND] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ {model}...")
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                timeout=30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
            )
            content = response.choices[0].message.content
            print(f"[RECOMMEND] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {model}: {content}")
            try:
                import json
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π JSON
                result = json.loads(content)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º JSON –≤ markdown –±–ª–æ–∫–µ
                import re
                json_match = re.search(r'```json\s*(\{[\s\S]*?\})\s*```', content)
                if json_match:
                    try:
                        result = json.loads(json_match.group(1))
                    except json.JSONDecodeError:
                        print(f"[RECOMMEND] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ markdown: {json_match.group(1)}")
                        result = {
                            "explanation": content,
                            "recommended_tracks": [],
                            "alternative_genres": []
                        }
                else:
                    # –ï—Å–ª–∏ markdown –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ª—é–±–æ–π JSON –≤ —Ç–µ–∫—Å—Ç–µ
                    json_match = re.search(r'\{[\s\S]*\}', content)
                    if json_match:
                        try:
                            result = json.loads(json_match.group(0))
                        except json.JSONDecodeError:
                            print(f"[RECOMMEND] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ JSON: {json_match.group(0)}")
                            result = {
                                "explanation": content,
                                "recommended_tracks": [],
                                "alternative_genres": []
                            }
                    else:
                        print(f"[RECOMMEND] JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {content}")
                        result = {
                            "explanation": content,
                            "recommended_tracks": [],
                            "alternative_genres": []
                        }
            
            return {
                "success": True,
                "recommendations": result
            }
        except Exception as e:
            print(f"[RECOMMEND] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                "success": True,
                "recommendations": {
                    "explanation": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {str(e)}",
                    "recommended_tracks": [
                        {"name": "Blinding Lights", "artist": "The Weeknd", "reason": "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –ø–æ–ø-—Ç—Ä–µ–∫"},
                        {"name": "Levitating", "artist": "Dua Lipa", "reason": "–õ–µ—Ç–Ω–∏–π –≤–∞–π–±"},
                        {"name": "Circles", "artist": "Post Malone", "reason": "–ú–µ–ª–æ–¥–∏—á–Ω—ã–π —Ç—Ä–µ–∫"}
                    ],
                    "alternative_genres": ["pop", "electronic", "indie"]
                }
            } 