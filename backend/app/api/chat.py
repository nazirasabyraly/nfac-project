from fastapi import APIRouter, UploadFile, File, HTTPException, Depends, status
from fastapi.responses import JSONResponse
from typing import Dict, Any, List
import json
from ..services.openai_service import OpenAIService
from ..config import MAX_FILE_SIZE, ALLOWED_EXTENSIONS
from ..dependencies import get_current_user
from sqlalchemy.orm import Session
from ..database import get_db
from ..models.user import SavedSong, User, ChatMessage
from ..schemas import ChatMessageCreate, ChatMessageOut, GenerateBeatRequest, GenerateBeatResponse, GenerateBeatStatusRequest
import asyncio
import os
import requests

router = APIRouter(tags=["chat"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
openai_service = OpenAIService()

AUDIO_CACHE_DIR = "audio_cache"
os.makedirs(AUDIO_CACHE_DIR, exist_ok=True)

@router.post("/analyze-media")
async def analyze_media(
    file: UploadFile = File(...),
    user_id: str = None
):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    """
    try:
        print(f"üîç –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}, —Ä–∞–∑–º–µ—Ä: {file.size}, —Ç–∏–ø: {file.content_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file.size and file.size > MAX_FILE_SIZE:
            raise HTTPException(status_code=400, detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if file.filename:
            file_ext = '.' + file.filename.split('.')[-1].lower()
            print(f"üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_ext}")
            print(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {ALLOWED_EXTENSIONS}")
            
            if file_ext not in ALLOWED_EXTENSIONS:
                raise HTTPException(
                    status_code=400, 
                    detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}"
                )
        
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
        analysis = await openai_service.analyze_media_mood(file)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis}")
        
        if "error" in analysis:
            raise HTTPException(status_code=500, detail=analysis["error"])
        
        return JSONResponse(content=analysis)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_media: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}")

@router.post("/get-recommendations")
async def get_music_recommendations(
    mood_analysis: Dict[str, Any],
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–≤–µ –ø–æ–¥–±–æ—Ä–∫–∏: 5 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö (–ø–æ saved_songs) –∏ 5 –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö (–ø–æ mood_analysis)
    """
    try:
        global_prefs = {
            "top_genres": ["pop", "electronic", "indie"],
            "top_artists": ["The Weeknd", "Dua Lipa", "Post Malone"],
            "top_tracks": ["Blinding Lights", "Levitating", "Circles"]
        }
        saved_songs = db.query(SavedSong).filter(SavedSong.user_id == current_user.id).all()
        personal_prefs = {
            "top_genres": [],
            "top_artists": list({s.artist for s in saved_songs if s.artist}),
            "top_tracks": list({s.title for s in saved_songs if s.title})
        } if saved_songs else global_prefs
        print(f"[RECOMMEND] mood_analysis: {mood_analysis}")
        print(f"[RECOMMEND] personal_prefs: {personal_prefs}")
        try:
            print("[RECOMMEND] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É OpenAI...")
            global_task = openai_service.get_music_recommendations(mood_analysis, global_prefs, n_tracks=5)
            personal_task = openai_service.get_music_recommendations(mood_analysis, personal_prefs, n_tracks=5)
            global_rec, personal_rec = await asyncio.wait_for(
                asyncio.gather(global_task, personal_task), timeout=60.0
            )
            print(f"[RECOMMEND] –û—Ç–≤–µ—Ç OpenAI: global={global_rec}, personal={personal_rec}")
            return JSONResponse(content={
                "global": global_rec["recommendations"],
                "personal": personal_rec["recommendations"],
                "ask_feedback": True
            })
        except asyncio.TimeoutError:
            print("[RECOMMEND] Timeout –æ—Ç OpenAI! –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É.")
            raise HTTPException(status_code=500, detail="OpenAI API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            print(f"[RECOMMEND] –û—à–∏–±–∫–∞ OpenAI: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç OpenAI: {str(e)}")
    except Exception as e:
        print(f"[RECOMMEND] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")

@router.post("/chat")
async def chat_with_ai(
    message: str,
    mood_analysis: Dict[str, Any] = None,
    user_id: str = None
):
    """
    –û–±—â–∏–π —á–∞—Ç —Å –ò–ò –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        context = f"""
        –¢—ã –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –º—É–∑—ã–∫–∏. 
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{message}"
        """
        
        if mood_analysis:
            context += f"""
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:
            - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_analysis.get('mood', 'neutral')}
            - –û–ø–∏—Å–∞–Ω–∏–µ: {mood_analysis.get('description', '')}
            - –≠–º–æ—Ü–∏–∏: {mood_analysis.get('emotions', [])}
            """
        
        context += """
        –û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∂–∞–Ω—Ä—ã, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–ª–∏ –æ–±—Å—É–¥–∏—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        response = openai_service.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –º—É–∑—ã–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é."},
                {"role": "user", "content": context}
            ],
            max_tokens=300
        )
        
        ai_response = response.choices[0].message.content
        
        return JSONResponse(content={
            "success": True,
            "response": ai_response,
            "message": message
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {str(e)}")

@router.get("/supported-formats")
async def get_supported_formats():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
    """
    return JSONResponse(content={
        "supported_formats": list(ALLOWED_EXTENSIONS),
        "max_file_size_mb": MAX_FILE_SIZE // (1024 * 1024)
    })

@router.get('/history', response_model=List[ChatMessageOut])
def get_chat_history(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    return db.query(ChatMessage).filter(ChatMessage.user_id == current_user.id).order_by(ChatMessage.timestamp).all()

@router.post('/history', response_model=ChatMessageOut)
def add_chat_message(msg: ChatMessageCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    db_msg = ChatMessage(user_id=current_user.id, **msg.dict())
    db.add(db_msg)
    db.commit()
    db.refresh(db_msg)
    return db_msg

@router.delete('/history', status_code=status.HTTP_204_NO_CONTENT)
def delete_chat_history(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    db.query(ChatMessage).filter(ChatMessage.user_id == current_user.id).delete()
    db.commit()
    return None

@router.post("/generate-beat", response_model=GenerateBeatResponse)
async def generate_beat(request: GenerateBeatRequest):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º—É–∑—ã–∫—É —á–µ—Ä–µ–∑ Riffusion API –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø—Ä–æ–º–ø—Ç—É.
    """
    try:
        prompt = request.prompt
        # --- Riffusion API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
        RIFFUSION_API_KEY = os.getenv("RIFFUSION_API_KEY")
        if not RIFFUSION_API_KEY:
            return GenerateBeatResponse(success=False, error="RIFFUSION_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π Riffusion API
        url = "https://riffusionapi.com/api/generate-music"
        headers = {
            "accept": "application/json",
            "x-api-key": RIFFUSION_API_KEY,
            "Content-Type": "application/json"
        }
        data = {
            "prompt": prompt
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        resp = requests.post(url, headers=headers, json=data, timeout=120)
        if resp.status_code != 200:
            return GenerateBeatResponse(success=False, error=f"Riffusion API error: {resp.text}")
        
        result = resp.json()
        print("Riffusion API response:", result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = result.get("status")
        if status == "pending":
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            request_id = result.get("request_id")
            return GenerateBeatResponse(
                success=True, 
                status="pending",
                request_id=request_id,
                message="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥."
            )
        elif status == "complete":
            # –ì–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            data = result.get("data", {})
            if data and "data" in data and len(data["data"]) > 0:
                audio_url = data["data"][0].get("stream_audio_url")
                if audio_url:
                    # –°–∫–∞—á–∏–≤–∞–µ–º mp3
                    audio_resp = requests.get(audio_url, timeout=120)
                    if audio_resp.status_code == 200:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        import uuid
                        filename = f"riffusion_{uuid.uuid4().hex}.mp3"
                        file_path = os.path.join(AUDIO_CACHE_DIR, filename)
                        with open(file_path, "wb") as f:
                            f.write(audio_resp.content)
                        
                        return GenerateBeatResponse(success=True, audio_url=f"/audio_cache/{filename}")
                    else:
                        return GenerateBeatResponse(success=False, error="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ")
                else:
                    return GenerateBeatResponse(success=False, error="Riffusion API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ")
            else:
                return GenerateBeatResponse(success=False, error="–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Riffusion API")
        elif status == "failed":
            details = result.get("details", {})
            error_msg = details.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            return GenerateBeatResponse(success=False, error=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")
        else:
            return GenerateBeatResponse(success=False, error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç Riffusion API: {status}")
            
    except Exception as e:
        return GenerateBeatResponse(success=False, error=str(e))

@router.post("/generate-beat/status")
async def check_generation_status(request: GenerateBeatStatusRequest):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏
    """
    try:
        request_id = request.request_id
        RIFFUSION_API_KEY = os.getenv("RIFFUSION_API_KEY")
        if not RIFFUSION_API_KEY:
            return JSONResponse(content={"success": False, "error": "RIFFUSION_API_KEY –Ω–µ –∑–∞–¥–∞–Ω"})
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Riffusion —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        url = "https://riffusionapi.com/api/generate-music"
        headers = {
            "accept": "application/json",
            "x-api-key": RIFFUSION_API_KEY,
            "Content-Type": "application/json"
        }
        data = {
            "request_id": request_id
        }
        
        resp = requests.post(url, headers=headers, json=data, timeout=30)
        if resp.status_code != 200:
            return JSONResponse(content={"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {resp.text}"})
        
        result = resp.json()
        print(f"Status check for {request_id}: {result}")
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å complete –∏ –µ—Å—Ç—å audio_url, —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        if result.get("status") == "complete":
            data = result.get("data", {})
            if data and "data" in data and len(data["data"]) > 0:
                audio_url = data["data"][0].get("stream_audio_url")
                if audio_url:
                    try:
                        audio_resp = requests.get(audio_url, timeout=120)
                        if audio_resp.status_code == 200:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                            import uuid
                            filename = f"riffusion_{uuid.uuid4().hex}.mp3"
                            file_path = os.path.join(AUDIO_CACHE_DIR, filename)
                            with open(file_path, "wb") as f:
                                f.write(audio_resp.content)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—É—Ç–µ–º
                            result["local_audio_url"] = f"/audio_cache/{filename}"
                            
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        
        return JSONResponse(content={"success": True, "status": result})
        
    except Exception as e:
        return JSONResponse(content={"success": False, "error": str(e)}) 